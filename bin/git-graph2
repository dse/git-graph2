#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;
use utf8;

#------------------------------------------------------------------------------
use File::Basename qw(basename);
our $PROGNAME = basename($0);

#------------------------------------------------------------------------------
use open IO => qw(:locale);
use Encode::Locale;
use Encode qw(decode);
BEGIN {
    @ARGV = map { decode('locale', $_, Encode::FB_CROAK) } @ARGV;
}

#------------------------------------------------------------------------------
use IO::Handle;
STDOUT->autoflush(1);
STDERR->autoflush(1);

#------------------------------------------------------------------------------
use FindBin;
use lib "${FindBin::Bin}/../lib";

#------------------------------------------------------------------------------
my $g2 = My::Git::Graph2->new();

#------------------------------------------------------------------------------
our $showParents;
our $stdin;
our $verbosity = 0;
our $dryRun;
our $wrapColumns;
our $abbrev = 1;

#------------------------------------------------------------------------------
use Getopt::Long;
Getopt::Long::Configure('bundling', 'gnu_compat', 'no_ignore_case');
Getopt::Long::GetOptions(
    # own options
    'parents|show-parents' => \$showParents,
    'stdin'                => \$stdin,
    'wrap:i'               => sub { $wrapColumns = defined $_[1] ? $_[1] : 0; },

    'mark-merges'          => sub { $g2->markMerges('mark'); },
    'hide-merges'          => sub { $g2->markMerges('hide'); },
    'mark-branches-off=s'  => sub { push(@{$g2->markBranchesOff}, $_[1]); },

    'adog' => sub {
        push(
            @{$g2->gitLogOptions},
            '--all',
            '--oneline',
            '--decorate',
        );
    },

    # revlist options
    'A=s'                  => sub { $g2->markRevSpec->{A} = $_[1]; },
    'B=s'                  => sub { $g2->markRevSpec->{B} = $_[1]; },
    'C=s'                  => sub { $g2->markRevSpec->{C} = $_[1]; },

    # git log options
    'abbrev-commit'        => sub { $abbrev = 1; $g2->getoptLongOption('--abbrev-commit'); },
    'no-abbrev-commit'     => sub { $abbrev = 0; $g2->getoptLongOption('--no-abbrev-commit'); },
    'all'                  => sub { $g2->getoptLongOption('--all'); },
    'author-date-order'    => sub { $g2->getoptLongOption('--author-date-order'); },
    'color:s'              => sub { $g2->getoptLongOption('--color', 'optional', @_); },
    'date-order'           => sub { $g2->getoptLongOption('--date-order'); },
    'decorate:s'           => sub { $g2->getoptLongOption('--decorate', 'optional', @_); },
    'exclude=s'            => sub { $g2->getoptLongOption('--exclude', 'required', @_); },
    'graph'                => sub { }, # has no effect
    'name-status'          => sub { $g2->getoptLongOption('--name-status'); },
    'oneline|one-line'     => sub { $g2->getoptLongOption('--oneline'); },
    'pretty:s'             => sub { $g2->getoptLongOption('--pretty', 'optional', @_); },
    'topo-order'           => sub { $g2->getoptLongOption('--topo-order'); },
    'date=s'               => sub { $g2->getoptLongOption('--date', 'required', @_); },
    # NOTE: specifying --no-merges breaks the graph.

    # common options
    'v|verbose+'           => \$verbosity,
    'h|help'               => sub { usage(); exit(0); },
    'n|dry-run'            => \$dryRun,
) or die("Type '$PROGNAME --help' for help.  Type 'perldoc $PROGNAME' for a manual page.\n");

sub usage { print(<<"END"); }
usage:
    git graph2 [<option> ...] [<revision-range>] [[--] <path> ...]
    git graph2 --stdin [<option> ...] [<filename> ...]
options:
    -n, --dry-run
    -h, --help
        --show-parents          works like in 'git log'
        --abbrev
        --stdin
    -v, --verbose
        --wrap[=<num>]          wrap commit log messages
        --mark-merges
to mark revisions in a revision range with 'A'/'B'/'C' instead of '*':
    -A, --A='<revision-range>'
    -B, --B='<revision-range>'
    -C, --C='<revision-range>'
options passed to git log:
        --abbrev-commit
        --no-abbrev-commit
        --adog
        --all
        --author-date-order
        --color[=<when>]
        --date-order
        --decorate[=short|full|auto|no]
        --exclude=<glob-pattern>
        --graph (has no effect)
        --name-status
        --oneline
        --pretty[=<format>]
        --topo-order
        --date=<format>
Type 'perldoc $PROGNAME' for a manual page.
END

# --pretty=format:'%h|%p|%ai|%d|%s'

###############################################################################

use String::ShellQuote qw(shell_quote);

$g2->verbosity($verbosity);
$g2->showParents($showParents);
$g2->stdin($stdin);
$g2->wrapColumns($wrapColumns) if defined $wrapColumns;

if ($g2->dryRun) {
    printf STDERR ("+ %s\n", shell_quote($g2->getGitLogCommand(@ARGV)));
    exit(0);
}

$g2->run(@ARGV);

###############################################################################

package My::Git::Graph2 {
    use FindBin;
    use lib "${FindBin::Bin}/../lib";

    use lib "$ENV{HOME}/git/dse.d/perl-tree-commitgraph/lib";
    use Tree::CommitGraph;

    use Sort::Naturally qw(nsort);
    use String::ShellQuote qw(shell_quote);
    use Text::Tabs qw(expand);
    use Data::Dumper qw(Dumper);
    use Storable qw(dclone);
    use Text::Wrap qw();
    use List::Util qw(min max);
    use Moo;
    use IO::Pty;

    use lib "$ENV{HOME}/git/dse.d/perl-io-pager-self/lib";
    use IO::Pager::Self qw(pager);

    INIT {
        # state
        has commit                 => (is => 'rw');
        has parents                => (is => 'rw', default => sub { return []; });

        # options
        has gitLogOptions          => (is => 'rw', default => sub { return []; });
        has showParents            => (is => 'rw', default => 0);
        has padding                => (is => 'rw', default => 32);
        has stdin                  => (is => 'rw', default => 0);
        has verbosity              => (is => 'rw', default => 0);
        has dryRun                 => (is => 'rw', default => 0);
        has wrapColumns            => (is => 'rw');
        has abbrev                 => (is => 'rw', default => 1);

        has markMerges             => (is => 'rw');
        has markBranchesOff        => (is => 'rw', default => sub { return []; }); # supplied on cmdline
        has markBranchesOffCommits => (is => 'rw', default => sub { return []; }); # converted to commitids

        # mark certain revisions
        has markRevSpec => (is => 'rw', default => sub { return {}; }); # -A<revspec>, -B, -C
        has markRevList => (is => 'rw', default => sub { return {}; });
        has markRevHash => (is => 'rw', default => sub { return {}; });

        # related to revision marking
        has revs => (is => 'rw', default => sub { return {}; });

        has commits       => (is => 'rw', default => sub { return []; }); # [ commit, ... ]
        has commitParents => (is => 'rw', default => sub { return {}; }); # { commit => [ parent, ... ] }
        has commitLogs    => (is => 'rw', default => sub { return {}; }); # { commit => [ line, ... ] }

        has isatty => (is => 'rw', default => 0); # for color handling
        has treeGraph => (
            is => 'rw', default => sub {
                return Tree::CommitGraph->new();
            }
        );
    }

    sub BUILD {
        my ($self) = @_;
        $self->isatty(1) if -t 1; # for color handling
    }

    sub run {
        my ($self, @args) = @_;
        $self->treeGraph->{isatty} = $self->isatty;
        pager();
        $self->collectRevs();
        $self->collectRevLists();
        $self->markRevLists();
        $self->printRevListLegends();
        if ($self->stdin) {
            $self->runStdin(@args);
        } else {
            $self->runGit(@args);
        }
    }

    sub collectRevs {
        my ($self) = @_;
        foreach my $rev (@{$self->markBranchesOff}) {
            my $commitid = $self->getRev($rev); # short
            push(@{$self->markBranchesOffCommits}, $commitid) if defined $commitid;
        }
    }

    sub getRev {
        my ($self, $ref, $short) = @_;
        my $hash = $self->revs;
        return $hash->{$ref} if exists $hash->{ref};
        my @cmd = ('git', 'rev-parse', ($self->abbrev ? ('--short') : ()), $ref);
        printf STDERR ("+ %s\n", shell_quote(@cmd)) if $self->verbosity >= 1;
        my $ph;
        if (!open($ph, '-|', @cmd)) {
            warn("failed to open pipe for git rev-parse: $!\n");
            return;
        }
        my $commitid = <$ph>;
        return unless defined $commitid;
        $commitid =~ s{\R\z}{};
        $hash->{$ref} = $commitid;
        return $commitid;
    }

    sub collectRevLists {
        my ($self) = @_;
        foreach my $revSpecName (keys %{$self->markRevSpec}) {
            my $markRevSpec = $self->markRevSpec->{$revSpecName};
            my @markRevList = $self->getRevList($markRevSpec);
            my %markRevHash = map { ($_ => 1) } @markRevList;
            $self->markRevList->{$revSpecName} = [@markRevList];
            $self->markRevHash->{$revSpecName} = {%markRevHash};
        }
    }

    sub markRevLists {
        my ($self) = @_;
        foreach my $revSpecName (keys %{$self->markRevSpec}) {
            foreach my $rev (@{$self->markRevList->{$revSpecName}}) {
                $self->treeGraph->{mark}->{$rev}->{$revSpecName} = 1;
            }
        }
    }

    sub getRevList {
        my ($self, $spec) = @_;
        my @cmd = ('git', 'rev-list', ($self->abbrev ? '--abbrev-commit' : '--no-abbrev-commit'), $spec);
        printf STDERR ("+ %s\n", shell_quote(@cmd)) if $self->verbosity >= 1;
        open(my $ph, '-|', @cmd) or die("@cmd: $!\n");
        my @markRevList;
        local $_;
        while (<$ph>) {
            s{\R\z}{};
            s{^\s*}{};
            s{\s*$}{};
            push(@markRevList, $_) if ($_ =~ m{^[[:xdigit:]]+$});
        }
        return @markRevList;
    }

    sub printRevListLegends {
        my ($self) = @_;
        my $hasLegends = 0;
        foreach my $revSpecName (nsort keys %{$self->markRevSpec}) {
            my $markRevSpec = $self->markRevSpec->{$revSpecName};
            my $count   = scalar @{$self->markRevList->{$revSpecName}};
            my $parenthetical = '';
            if ($revSpecName =~ m{^(.*)\.\.\.(.*)$}) {
                my ($r1, $r2) = ($1, $2);
                $parenthetical = sprintf(" (commits in %s or %s but not both)", $r2, $r1);
            } elsif ($revSpecName =~ m{^(.*)\.\.(.*)$}) {
                my ($r1, $r2) = ($1, $2);
                $parenthetical = sprintf(" (commits in %s but not in %s)", $r2, $r1);
            }
            printf("%s = %s, %d revisions%s\n", $revSpecName, $markRevSpec, $count, $parenthetical);
            $hasLegends = 1;
        }
        if ($hasLegends) {
            print("\n");
        }
    }

    sub getoptLongOption {
        my ($self, $option, $type, @getoptLongArgs) = @_;
        my ($optionName, $value, $key) = @getoptLongArgs;

        $type //= 'none';

        if (defined $value) {
            if ($type eq 'required') {
                push(@{$self->gitLogOptions}, $option . '=' . $value);
            } else {
                if ($value eq '') {
                    push(@{$self->gitLogOptions}, $option);
                } else {
                    push(@{$self->gitLogOptions}, $option . '=' . $value);
                }
            }
        } else {
            if ($type eq 'required') {
                push(@{$self->gitLogOptions}, $option . '=');
            } else {
                push(@{$self->gitLogOptions}, $option);
            }
        }
    }

    sub runStdin {
        my ($self, @args) = @_;
        $self->initialize();
        $self->runFileHandle(\*ARGV);
    }

    sub runGit {
        my ($self, @args) = @_;
        $self->initialize();
        my @cmd = $self->getGitLogCommand();
        printf STDERR ("+ %s\n", shell_quote(@cmd)) if $self->verbosity >= 1;
        my $ph;
        if (!open($ph, '-|', @cmd)) {
            warn("pipe: $!\n");
            return;
        }
        $self->runFileHandle($ph);
    }

    sub runFileHandle {
        my ($self, $fh) = @_;
        local $_ = undef; # $ARG (the default input and pattern-matching space)
        local $/ = "\n";  # $INPUT_RECORD_SEPARATOR
        my @commit;
        while (<$fh>) {
            $self->parseLine($_);
        }
        $self->eof();
    }

    sub initialize {
        my ($self) = @_;
    }

    sub parseLine {
        my ($self, $line) = @_;
        $line =~ s{\R\z}{};
        my $origLine = $line;
        $line =~ s{\e\[[0-9;]*m}{}g; # remove color escapes
        my $commit;
        if ($line =~ s{^\s*([[:xdigit:]]{7,})\s*}{}) {
            # line starts with commitid
            $commit = $1;
        } elsif ($line =~ s{^\s*commit\s+([[:xdigit:]]{7,})\s*}{}) {
            # line starts with "commit <commitid>"
            $commit = $1;
        } else {
            $self->continueCommit($origLine);
            return;
        }
        my @parents;
        while ($line =~ s{^\s*([[:xdigit:]]{7,})\s*}{}) {
            my $parent = $1;
            push(@parents, $parent);
        }
        my $commitLine = $origLine;
        if (!$self->showParents) {
            # chop off parents, we're outputting them ourselves
            foreach my $parent (@parents) {
                $commitLine =~ s{\s+$parent\b}{};
            }
        }
        $self->startCommit($commitLine, $commit, @parents);
    }

    sub eof {
        my ($self) = @_;
        $self->endCommit() if defined $self->commit;
    }

    sub startCommit {
        my ($self, $line, $commit, @parents) = @_;
        $self->endCommit() if defined $self->commit;
        $self->commit($commit);
        $self->parents(\@parents);
        $self->treeGraph->processCommit(commit => $commit, parents => [@parents]);
        $self->treeGraph->printCommitLine($line);
    }

    sub continueCommit {
        my ($self, $line) = @_;
        $self->treeGraph->printCommitLine($line);
    }

    sub markMerge {
        my ($self) = @_;

        if (!$self->markMerges) {
            return;
        }
        if (scalar @{$self->parents} < 2) {
            return;
        }

        if (!scalar @{$self->commitLog}) {
            push(@{$self->commitLog}, '');
        }

        if ($self->markMerges eq 'mark') {
            $self->commitLog->[0] =~ s{\s+$}{};
            $self->commitLog->[0] .= ' [MERGE]';
        } elsif ($self->markMerges eq 'hide') {
            $self->commitLog->[0] = '[MERGE]';
        }
    }

    sub markBranchOff {
        my ($self) = @_;
        return unless $self->willMarkBranchOff();
        if (!scalar @{$self->commitLog}) {
            push(@{$self->commitLog}, '');
        }
        $self->commitLog->[0] =~ s{\s+$}{};
        $self->commitLog->[0] .= ' [CHILD]';
    }

    sub willMarkBranchOff {
        my ($self) = @_;
        if (!scalar @{$self->markBranchesOff}) {
            return 0;
        }

        foreach my $markOffCommit (@{$self->markBranchesOffCommits}) {
            my $columnNumber = $self->columnNumbers->{$markOffCommit};
            next unless defined $columnNumber;
            if ($columnNumber == $self->commitColumnNumber) {
                return 0;
            }
        }

        foreach my $markOffCommit (@{$self->markBranchesOffCommits}) {
            my $len1 = length $markOffCommit;
            foreach my $parent (@{$self->parents}) {
                my $len2 = length $parent;
                my $len = min($len1, $len2);
                if (substr($markOffCommit, 0, $len) eq substr($parent, 0, $len)) {
                    return 1;
                }
            }

            my $column1 = $self->columnNumbers->{$markOffCommit};
            next unless defined $column1;
            foreach my $parent (@{$self->parents}) {
                my $column2 = $self->columnNumbers->{$parent};
                next if !defined $column2;
                if ($column1 == $column2) {
                    return 1;
                }
            }
        }
        return 0;
    }

    sub endCommit {
        my ($self) = @_;
        $self->treeGraph->endCommit();
        $self->commit(undef);
        $self->parents([]);
    }

    sub getGitLogCommand {
        my ($self, @args) = @_;
        return (
            'git', 'log', '--parents', '--topo-order', '--color',
            ($self->abbrev ? '--abbrev-commit' : '--no-abbrev-commit'),
            @{$self->gitLogOptions}, @args
        );
    }
};
